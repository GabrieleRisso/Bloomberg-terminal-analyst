#!/bin/bash

source ~/anaconda3/etc/profile.d/conda.sh
conda activate gst
i="TSLA"
dir="/home/gabriele/stock"
mkdir -p /home/gabriele/stock/ta/

tv          open interactive chart on [TradingView]
    view        view historical data and trendlines [Finviz]
    summary     technical summary report [FinBrain]
    recom       recommendation based on Technical Indicators [Tradingview]

Overlap:
    ema         exponential moving average
    sma         simple moving average
    wma         weighted moving average
    hma         hull moving average
    zlma        zero lag moving average
    vwap        volume weighted average price
Momentum:
    cci         commodity channel index
    macd        moving average convergence/divergence
    rsi         relative strength index
    stoch       stochastic oscillator
    fisher      fisher transform
    cg          centre of gravity
Trend:
    adx         average directional movement index
    aroon       aroon indicator
Volatility:
    bbands      bollinger bands
    donchian    donchian channels
    kc          keltner channels
Volume:
    ad          accumulation/distribution line
    adosc       chaikin oscillator
    obv         on balance volume
Custom:
    fib         fibonacci retracement

function view{ #not in my terminal
output=$(./terminal.py "/stocks/load "${1}"/ta/view --export png/exit")


view_path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/technical_analysis/view_[0-9]*_[0-9]*.png" | head -n 1)
mv "${view_path}" "${dir}"/ta/view.png
}

function summary{

output=$(./terminal.py "/stocks/load "${1}"/ta/summary/info/exit")
savedfile=""${dir}"/ta/summary.txt"
echo "$output" > "$savedfile"
}

https://python-tradingview-ta.readthedocs.io/en/latest/usage.html


function recom{ 
output=$(./terminal.py "/stocks/load "${1}"/ta/recom --export csv/exit")
recom_path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/technical_analysis/recom_[0-9]*_[0-9]*.png" | head -n 1)
mv "${recom_path}" "${dir}"/ta/recom.csv
}

function ema{ #not in my terminal
window="20,50,100"
offset="0"
output=$(./terminal.py "/stocks/load "${1}"/ta/ema -l "$window" -o "$offset" --export png/exit")

ema_path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/ema*.png" | head -n 1)
mv "${ema_path}" "${dir}"/ta/ema"$window".png
}

function sma{ #not in my terminal
window="20,50,100"
offset="0"
output=$(./terminal.py "/stocks/load "${1}"/ta/sma -l "$window" -o "$offset" --export png/exit")

sma_path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/sma*.png" | head -n 1)
mv "${sma_path}" "${dir}"/ta/sma"$window".png
}


function wma{ #not in my terminal
window="20,50,100"
offset="0"
output=$(./terminal.py "/stocks/load "${1}"/ta/wma -l "$window" -o "$offset" --export png/exit")

wma_path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/wma*.png" | head -n 1)
mv "${wma_path}" "${dir}"/ta/wma"$window".png
}

function hma{ 
window="20,50,100"
offset="0"
output=$(./terminal.py "/stocks/load "${1}"/ta/hma -l "$window" -o "$offset" --export png/exit")

hma_path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/hma*.png" | head -n 1)
mv "${hma_path}" "${dir}"/ta/wma"$window".png
}

function zlma{ 
window="20,50"
offset="0"
output=$(./terminal.py "/stocks/load "${1}"/ta/zlma -l "$window" -o "$offset" --export png/exit")

zlma_path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/zlma*.png" | head -n 1)
mv "${zlma_path}" "${dir}"/ta/zlma"$window".png
}

function vwap{ 
offset="0"
output=$(./terminal.py "/stocks/load "${1}"/ta/vwap -o "$offset" --export png/exit")

vwap_path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/hma*.png" | head -n 1)
mv "${vwap_path}" "${dir}"/ta/wma"$window".png
}

function cci{ 
len="14"
scalar="0.015"
output=$(./terminal.py "/stocks/load "${1}"/ta/cci -l "$len" -s "$scalar" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/cci_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/cci.png
}

function macd{ 
fast="12"
slow="26"
singal="9"
output=$(./terminal.py "/stocks/load "${1}"/ta/macd -f "$fast" -s "$slow" --signal "$signal" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/macd_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/macd.png
}

function rsi{ 

The Relative Strength Index (RSI) calculates a ratio of the recent upward price movements to the absolute price movement. The RSI ranges from 0 to 100. The RSI is
interpreted as an overbought/oversold indicator when the value is over 70/below 30. You can also look for divergence with price. If the price is making new highs/lows,
and the RSI is not, it indicates a reversal.

len="14"
scalar="100"
drift="1"
output=$(./terminal.py "/stocks/load "${1}"/ta/rsi -l "$len" -s "$scalar" -d "$drift" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/rsi_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/rsi.png
}

function stoch{ 


The Stochastic Oscillator measures where the close is in relation to the recent trading range. The values range from zero to 100. %D values over 75 indicate an
overbought condition; values under 25 indicate an oversold condition. When the Fast %D crosses above the Slow %D, it is a buy signal; when it crosses below, it is a
sell signal. The Raw %K is generally considered too erratic to use for crossover signals.

fast="14"
slowd="3"
slowk="3"
output=$(./terminal.py "/stocks/load "${1}"/ta/stoch -k "$fast" -d "$slowd" --slowkperiod "$slowk" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/stoch_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/stoch.png
}


function fisher{ 

The Fisher Transform is a technical indicator created by John F. Ehlers that converts prices into a Gaussian normal distribution.1 The indicator highlights when prices
have moved to an extreme, based on recent prices. This may help in spotting turning points in the price of an asset. It also helps show the trend and isolate the price
waves within a trend.

len="14"
output=$(./terminal.py "/stocks/load "${1}"/ta/fisher -l "$len" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/fisher_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/fisher.png
}

function cg{ 

The Center of Gravity indicator, in short, is used to anticipate future price movements and to trade on price reversals as soon as they happen. However, just like other
oscillators, the COG indicator returns the best results in range-bound markets and should be avoided when the price is trending. Traders who use it will be able to
closely speculate the upcoming price change of the asset.

len="14"
output=$(./terminal.py "/stocks/load "${1}"/ta/cg -l "$len" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/cg_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/centerofgravity.png
}

function adx{ 

The ADX is a Welles Wilder style moving average of the Directional Movement Index (DX). The values range from 0 to 100, but rarely get above 60. To interpret the ADX,
consider a high number to be a strong trend, and a low number, a weak trend.
len="14"
scalar="100"
drift="1"
output=$(./terminal.py "/stocks/load "${1}"/ta/adx -l "$len" -s "$scalar" -d "$drift" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/adx_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/adx.png
}

function aroon{ 

The word aroon is Sanskrit for "dawn's early light." The Aroon indicator attempts to show when a new trend is dawning. The indicator consists of two lines (Up and Down)
that measure how long it has been since the highest high/lowest low has occurred within an n period range. When the Aroon Up is staying between 70 and 100 then it
indicates an upward trend. When the Aroon Down is staying between 70 and 100 then it indicates an downward trend. A strong upward trend is indicated when the Aroon Up
is above 70 while the Aroon Down is below 30. Likewise, a strong downward trend is indicated when the Aroon Down is above 70 while the Aroon Up is below 30. Also look
for crossovers. When the Aroon Down crosses above the Aroon Up, it indicates a weakening of the upward trend (and vice versa).

len="14"
scalar="100"
output=$(./terminal.py "/stocks/load "${1}"/ta/aroon-l "$len" -s "$scalar" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/aroon_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/aroon.png
}

function bbands{ 

Bollinger Bands consist of three lines. The middle band is a simple moving average (generally 20 periods) of the typical price (TP). The upper and lower bands are F
standard deviations (generally 2) above and below the middle band. The bands widen and narrow when the volatility of the price is higher or lower, respectively.
Bollinger Bands do not, in themselves, generate buy or sell signals; they are an indicator of overbought or oversold conditions. When the price is near the upper or
lower band it indicates that a reversal may be imminent. The middle band becomes a support or resistance level. The upper and lower bands can also be interpreted as
price targets. When the price bounces off of the lower band and crosses the middle band, then the upper band becomes the price target.

len="25"
scalar="100"
mamode="sma"
output=$(./terminal.py "/stocks/load "${1}"/ta/bband -l "$len" -s "$scalar" -m "$mamode" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/bband_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/bband.png
}


function donchain{ 

Donchian Channels are three lines generated by moving average calculations that comprise an indicator formed by upper and lower bands around a midrange or median band.
The upper band marks the highest price of a security over N periods while the lower band marks the lowest price of a security over N periods. The area between the upper
and lower bands represents the Donchian Channel.

upper="20"
lower="20"
output=$(./terminal.py "/stocks/load "${1}"/ta/aroon-l "$len" -s "$scalar" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/donchain_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/donchain.png
}

function kc{ 

#Keltner Channels are volatility-based bands that are placed on either side of an asset's price and can aid in determining the direction of a trend.The Keltner channel
#uses the average true range (ATR) or volatility, with breaks above or below the top and bottom barriers signaling a continuation.

len="20"
scalar="2"
mamode="ema"
offset="0"
output=$(./terminal.py "/stocks/load "${1}"/ta/kc -l "$len" -s "$scalar" -m "$mamode" -o "$offset" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/kc_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/kc.png
}

function ad{ 

The Accumulation/Distribution Line is similar to the On Balance Volume (OBV), which sums the volume times +1/-1 based on whether the close is higher than the previous
close. The Accumulation/Distribution indicator, however multiplies the volume by the close location value (CLV). The CLV is based on the movement of the issue within a
single bar and can be +1, -1 or zero. The Accumulation/Distribution Line is interpreted by looking for a divergence in the direction of the indicator relative to price.
If the Accumulation/Distribution Line is trending upward it indicates that the price may follow. Also, if the Accumulation/Distribution Line becomes flat while the
price is still rising (or falling) then it signals an impending flattening of the price.

open="" #--open if needed:   --ope    uses open value of stock (default: False)

output=$(./terminal.py "/stocks/load "${1}"/ta/ad "$open" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/ad_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/ad.png
}

function adosc{ 
Accumulation/Distribution Oscillator, also known as the Chaikin Oscillator is essentially a momentum indicator, but of the Accumulation-Distribution line rather than
merely price. It looks at both the strength of price moves and the underlying buying and selling pressure during a given time period. The oscillator reading above zero
indicates net buying pressure, while one below zero registers net selling pressure. Divergence between the indicator and pure price moves are the most common signals
from the indicator, and often flag market turning points.
open="" #--open if needed :   --open    uses open value of stock (default: False)
fast="3"
slow="10"
output=$(./terminal.py "/stocks/load "${1}"/ta/adosc -f "$fast" -s "$slow" "$open" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/stoch_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/stoch.png
}


function obv{ 

The On Balance Volume (OBV) is a cumulative total of the up and down volume. When the close is higher than the previous close, the volume is added to the running total,
and when the close is lower than the previous close, the volume is subtracted from the running total. To interpret the OBV, look for the OBV to move with the price or
precede price moves. If the price moves before the OBV, then it is a non-confirmed move. A series of rising peaks, or falling troughs, in the OBV indicates a strong
trend. If the OBV is flat, then the market is not trending.

output=$(./terminal.py "/stocks/load "${1}"/ta/obv --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/obv_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/obv.png
}

function fibo {
Calculates the fibonacci retracement levels
period="120" 
start="2019-03-03" #starting date 
end="2021-03-03" #today?
output=$(./terminal.py "/stocks/load "${1}"/ta/adosc -p "$period" --start "$start" --end "$end" --export png/exit")

path=$(echo "$output" | grep -Eo  "${HOME}/GamestonkTerminal/exports/stocks/fundamental_analysis/fib_[0-9]*_[0-9]*.png" | head -n 1)
mv "${path}" "${dir}"/ta/fibonacci.png
}















